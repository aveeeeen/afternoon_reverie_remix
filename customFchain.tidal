--
-- FUNCTION GROUPS
--

let send2 =
        void
        {-
        .roomunit ("{1 9 1 7 1 7 1}%8 " * "0.1") ("{1 7 9 7 1 3 9}%8" * "0.1") ("{9 5 9 2 5 9 5 5}%4" * "0.1")
        -- .delunit ("{1 4 1 1 1 6 1}%4" * "0.1") (1/16) 0.3
        .(#l "{1 1 0.2 1 0.7 1 0.3}")
        -}
        -- .delunit ("{1 8 1 8 1 4 1}%4" * 0.1) ("<8 6 2 4>"/32) ("{7 4 7 7 4 7 4}%8" * 0.1)
        .roomunit ("{1 3 1 3 1 3 1}%8 " * "0.1") 0.9 ("{9 3 3 9 3 9 3}%8 "* "0.1")
        .delunit ("{1 1 1 3 1 6 1}%4" * 0.1) ("<2 4>"/32) ("{9 3 3 9 9 9 1}%8 "* "0.1")
        -- .(#l "{1 1 0.2 1 0.7 1 0.3}")
        -- .(# cut 353)
        -- .(#l 0.3)
    send =
        void
        .stut' 8 (1) (
            autopan
            -- .delunit ("{1 1 1 4 1 4 1}%4" * 0.1) ("<1 2>"/32) ("{9 3 3 9 3 9 4}%8 "* "0.1")
            -- .roomunit 0.3 0.9 0.9
            .(|* gain 0.9)
            .(|*r "{0.5}%2")
        )
    func1 =  
        void
        .whenmod 4 0 (
            void
            .stut' 2 (2/16) (
                 jux ("0.5" ~>)
                .(# speed ("1" * "-1 1 1 2 -1/2 1 -1.5 -1"))
                .(|* gain 0.5)
                .(|* l 0.8)
                -- .(|* r 0.5)
            )
        )
    func2 = 
        void
        .stut' 2 ("[3]/16") (
            void
            .jux ("<0.5 2.5>" ~> )
            -- .jux (rev)
            .(|* speed (choose [-1 , -1/2 , 2 ] |*| "1 .. 2 "))
            .(|* gain ("0.8"))
            .(|* l 0.7)
            -- .(# cut 2)
        )
        -- .(# release "[1 .. 0.3]/2")
    func3 =
        void
        -- .(#crush "16 .. 8")
        -- .(#crush "8 .. 4")
    masterPitch =
        (|+| nt "-5").
        (|+| nt "[0 [~ 12] 7 0]*2").
        slow 4.
        (|+| nt "<5 9 7 5>")      



hush


d1 
    $ every (2) (
        jux (fast (sine+(saw*2)))
    )
    $ filter "lpf" 40"2/16" 
    $   stack[fast 2 $ "bd ~ [~ bd] bd","[~ oc]*4","msg*8"] 
    # gain (tri*2+saw*4)*0.9 
    # speed "<[1 .. 4] [1 .. 4]*-1>"