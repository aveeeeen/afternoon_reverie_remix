let
    autos a b = (range a b $ saw)
    autor c d = (range c d $ rand)
    autonotes e f = (range e f rand)
    cl channel cycles = (clutchIn channel cycles)
    fd channel cycles = (xfadeIn channel cycles)
    nt a = note a
    rtmvar = choose [2,4,8,16]
    mov1 = choose [0,7,5,-3]
    mov2 = "[12]"    
    mov3 ="0" |+| "<5 4 -3 -3>" 
    spd = "1"
    stutInput = 0
    del a = delay a
    delT a = delaytime a
    delF a = delayfeedback a
    void = fast 1
    num = 8
    swng = (swingBy (4/24) 8) -- the sweet sopt (4/28) or (4/24)
    center = always (#pan 0.5)
    delunit a b c =
            (# delay a)
            .(#delaytime b)
            .(#delayfeedback c)
    roomunit a b c =
            (# room a)
            .(# size b)
            .(# dry c)
    autopan = (#pan (autos 0 1))
    kill = (#gain 0)
    l a = legato a
    r a = release a
    la a = loopAt a
    big a b =
        void
        -- . chop 1
        . (#shape a)
        . (#gain b)
        -- . (# triode "0.3 .. 0.7")
    tame = lpf 10000 # lpq 0.08
    st a = struct a
    c a = crush a
    g a = gain a
    randpan = (#pan (choose [1, 0]))
    dist a = distort a
    fq' x
        | x > 80 = 80
        | otherwise = x
    fq :: Pattern Double -> Pattern Double
    fq i = (\x -> fq' x) <$> i
    filter ftype a rt =
        if ftype == "lpf"
            then (
                (#lpf ("[10 .. 1] * 1" * "[10 .. 1] * 1" * "[10 .. 1]" * (fq a) * rt))
                . (#lpq 0.2)
                -- . (#l 0.95)
            )     
            else (
                (#hpf ("[1 .. 10] * 1" * "[1 .. 10] * 1" * "[1 .. 10]" * (fq a) * rt))
                . (#hpq 0.2)
                -- . (#l 0.95)
            )
    duplicate :: (Num int, Ord int) => int -> String -> String
    duplicate n x
        | n < 0 = x 
        | otherwise = previous
        where previous = duplicate (n - 1) (x ++ " " ++ x)

    